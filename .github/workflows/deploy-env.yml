name: 'Deployment to single environment'
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
        - dev
        - test
        - uat
        - oat
        - prod
      applyplan:
        type: boolean
        description: Apply Plan ?
      resources:
        type: choice
        description: Select the Resources
        options:
        - all
env:
    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Set Environments
      run: |
            if [[ ${{ github.event.inputs.environment }} == 'dev' || ${{ github.event.inputs.environment }} == 'test' ]] 
            then
              export INIT_FLAG='-backend-config="bucket=${{ secrets.CRNCC_DEV_TERRAFORM_BUCKET }}" -backend-config="key=se/${{ github.event.inputs.environment }}/terraform.tfstate"'
              export AWS_ACCESS_KEY="${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}"
              export AWS_SEC_ACCESS_KEY="${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}"
            elif [[ ${{ github.event.inputs.environment }} == 'uat' ]] 
            then
              export INIT_FLAG='-backend-config="bucket=${{ secrets.CRNCC_STAGING_TERRAFORM_BUCKET }}" -backend-config="key=se/${{ github.event.inputs.environment }}/terraform.tfstate"'
              export AWS_ACCESS_KEY="${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_ID }}"
              export AWS_SEC_ACCESS_KEY="${{ secrets.CRNCC_STAGING_IAM_ACCESS_KEY_SECRET }}"
            elif [[ ${{ github.event.inputs.environment }} == 'oat' || ${{ github.event.inputs.environment }} == 'prod' ]] 
            then
              export AWS_ACCESS_KEY="${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID }}"
              export AWS_SEC_ACCESS_KEY="${{ secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET }}"
              export INIT_FLAG='-backend-config="bucket=${{ secrets.CRNCC_PROD_TERRAFORM_BUCKET }}" -backend-config="key=se/${{ github.event.inputs.environment }}/terraform.tfstate"'            
            else
              export AWS_ACCESS_KEY="${{ secrets.AWS_PROD_ACCESS_KEY_ID }}"
              export AWS_SEC_ACCESS_KEY="${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}"
              export INIT_FLAG=""
            fi
            if [[ ${{ github.event.inputs.resources }} == 'all' ]] 
            then
              export RESOURCE=""
            else
              export RESOURCE="--target ${{ github.event.inputs.resources }}"
            fi

            echo "::set-env name=AWS_ACCESS_KEY::${AWS_ACCESS_KEY}"
            echo "::set-env name=AWS_SEC_ACCESS_KEY::${AWS_SEC_ACCESS_KEY}"
            echo "::set-env name=INIT_FLAG::${INIT_FLAG}"
            echo "::set-env name=RESOURCE::${RESOURCE}"
            echo "::set-env name=APPLY_PLAN::${{ github.event.inputs.applyplan }}"
            
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1.6.0
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ env.AWS_SEC_ACCESS_KEY }}
        aws-region: eu-west-2
        
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

      
    - name: Terraform Init ${{ github.event.inputs.environment }}
      run: |
           terraform init ${{ env.INIT_FLAG }}
        
    # Checks Terraform configuration valid
    - name: Terraform Validate ${{ github.event.inputs.environment }}
      run: |
           terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format ${{ github.event.inputs.environment }}
      run: |
           terraform fmt --recursive
           
    - name: Terraform Plan on ${{ github.event.inputs.environment }}
      run: |
           if [[ ${{ env.APPLY_PLAN }} == "true" ]];then
               echo "Check Plan"
               terraform plan -var="env=${{ github.event.inputs.environment }}" ${{ env.RESOURCE }}
               echo "Applying Plan"
               terraform apply -var="env=${{ github.event.inputs.environment }}" ${{ env.RESOURCE }} -no-color -auto-approve
           else 
               echo "Checking Plan"
               terraform plan -var="env=${{ github.event.inputs.environment }}" ${{ env.RESOURCE }}           
           fi